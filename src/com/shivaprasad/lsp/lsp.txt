By Shiva Prasad Gurram

It applies to inheritance in such a way that "Derived or child classes must be substitutable for their base or parent classes"

In other words, if class A is a subtype of class B, then we should be able to replace B with A without interrupting the behavior of the program

Lets assume we have a abstract class called "SocialMedia", who supports all social media features like

1) chatWithFriend
2) publishPost
3) sendPhotosandVideos
4) groupVideoCall

SocialMedia can have multiple implementations or can have multiple childs like Facebook, WhatsApp ,instagram and Twitter etc..

Lets assume Facebook want to use these features or functionalities, In 20th century FB supports all the above features 
"Facebook is complete substitute of SocialMedia class , both can be replaced without any interrupt"

Whatsapp doesn't support "publishPost" because it is just a chatting app, so here it it not substitute of parent i.e, "SocialMedia",
due to "publishPost" it doesn't follow LSP.

Same for instagram which doesn't support "groupVideoCall", here also it doesn't follow LSP.

How we can overcome this?

Create different interfaces like

SocialMedia (which holds chatWithFriend,sendPhotosAndVideos)
PostManager (publishPost)
GroupVideoCallManager (groupVideoCall)

Now if you observe we segregate specific functionality to separate class to follow LSP

Now its up to implementation class decision to support features , based on their desired feature they can use respective interface

for example, Instagram doesn't support "groupVideoCall" so it can implement only "SocialMedia" and "PostManager" interfaces.

for whatsapp it doesn't support "publishPost", so it can implement only "SocialMedia" and "GroupVideoCallManager" interfaces.


This is how you can design LSP.
