By Shiva Prasad Gurram

What is Single Responsibility Principle?

It states that "A class should have only one reason to change", which means every class should have a single responsibility or single job 
or single purpose.

Let's assume you are developing an application for a bank. Bank requirement is to have below operations in application.

1) deposit
2) withDraw
3) printPassbook
4) getLoanInterestInfo
5) sendOTP

After few months, bank said they want to provide loan interest info for "GOLD" and "STUDY" to their customers. Now you need to change your code to
accommodate this requirement, right?

Where you do these changes?
In BankService class, right? (We already have a method which currently dealing with "homeLoan","personalLoan","carLoan").

Again after few months, bank said they want to send OTP to "mobile" as well. Again you need to change in "BankService" class.

it doesn’t follow single responsibility principle because this class(BankService) has too many responsibilities or tasks to perform

How we can achieve SRP here?

To achieve the goal of the single responsibility principle, we should implement a separate class that performs a single functionality only

Lets create different classes for each functionality like printPassbook, getLoanInterestInfo, sendOTP.

Classes created:
1) PrinterService (which holds only printPassbook functionality)
2) LoanService (which holds only getLoanInterestInfo functionality)
3) NotificationService (which holds only sendOTP functionality).

this is how we can achieve SRP.

	