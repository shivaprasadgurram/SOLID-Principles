By Shiva Prasad Gurram

This principle is the first principle that applies to Interfaces instead of classes in SOLID and it is similar to the single responsibility principle.
It states that “do not force any client to implement an interface which is irrelevant to them“.

Lets assume your bank decided to accept payments via UPI. Overall a UPI can have maximum of 3 features like below and all are in UPIPayments interface
1) payMoney
2) getScratchCard
3) getCashBackAsCreditBalance

Lets take 

Gpay: it supports above all features so it can implements "UPIPayments" without any issue.
Paytm: It doesn't support "getCashBackAsCreditBalance" feature so here we shouldn’t force client paytm to override this method by 
implementing UPIPayments.

we need to segregate interface based on client need , so to support this ISP we can design something like below

ex: Create a separate interface for cashback and implements this into the Gpay separately.
Now we can remove getCashBackAsCreditBalance from UPIPayments interface.

Based on client need we segregate interface , let’s say paytm now implements from UPIPayments then as a client we are not forcing him anything
to use. which follow ISP.